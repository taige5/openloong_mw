// Generated by gencpp from file sdk/ManageNodeRequest.msg
// DO NOT EDIT!


#ifndef SDK_MESSAGE_MANAGENODEREQUEST_H
#define SDK_MESSAGE_MANAGENODEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sdk
{
template <class ContainerAllocator>
struct ManageNodeRequest_
{
  typedef ManageNodeRequest_<ContainerAllocator> Type;

  ManageNodeRequest_()
    : action(0)
    , node_name()
    , package_name()
    , executable_name()
    , parameter()  {
    }
  ManageNodeRequest_(const ContainerAllocator& _alloc)
    : action(0)
    , node_name(_alloc)
    , package_name(_alloc)
    , executable_name(_alloc)
    , parameter(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _node_name_type;
  _node_name_type node_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _package_name_type;
  _package_name_type package_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _executable_name_type;
  _executable_name_type executable_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _parameter_type;
  _parameter_type parameter;





  typedef boost::shared_ptr< ::sdk::ManageNodeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdk::ManageNodeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ManageNodeRequest_

typedef ::sdk::ManageNodeRequest_<std::allocator<void> > ManageNodeRequest;

typedef boost::shared_ptr< ::sdk::ManageNodeRequest > ManageNodeRequestPtr;
typedef boost::shared_ptr< ::sdk::ManageNodeRequest const> ManageNodeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdk::ManageNodeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdk::ManageNodeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdk::ManageNodeRequest_<ContainerAllocator1> & lhs, const ::sdk::ManageNodeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.node_name == rhs.node_name &&
    lhs.package_name == rhs.package_name &&
    lhs.executable_name == rhs.executable_name &&
    lhs.parameter == rhs.parameter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdk::ManageNodeRequest_<ContainerAllocator1> & lhs, const ::sdk::ManageNodeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdk::ManageNodeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdk::ManageNodeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::ManageNodeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::ManageNodeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::ManageNodeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::ManageNodeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdk::ManageNodeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "851bc38d56364408617eaea8587577ec";
  }

  static const char* value(const ::sdk::ManageNodeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x851bc38d56364408ULL;
  static const uint64_t static_value2 = 0x617eaea8587577ecULL;
};

template<class ContainerAllocator>
struct DataType< ::sdk::ManageNodeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdk/ManageNodeRequest";
  }

  static const char* value(const ::sdk::ManageNodeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdk::ManageNodeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 action  # 1 or 0\n"
"string node_name  # Node name to shut down\n"
"string package_name  # Package name to run\n"
"string executable_name  # Executable name to run\n"
"string parameter  # Parameter with which to call the executable\n"
;
  }

  static const char* value(const ::sdk::ManageNodeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdk::ManageNodeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.node_name);
      stream.next(m.package_name);
      stream.next(m.executable_name);
      stream.next(m.parameter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManageNodeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdk::ManageNodeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdk::ManageNodeRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action);
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node_name);
    s << indent << "package_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.package_name);
    s << indent << "executable_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.executable_name);
    s << indent << "parameter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.parameter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDK_MESSAGE_MANAGENODEREQUEST_H
