// Generated by gencpp from file sdk/AlohaCmd.msg
// DO NOT EDIT!


#ifndef SDK_MESSAGE_ALOHACMD_H
#define SDK_MESSAGE_ALOHACMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sdk
{
template <class ContainerAllocator>
struct AlohaCmd_
{
  typedef AlohaCmd_<ContainerAllocator> Type;

  AlohaCmd_()
    : arx_pos_left()
    , cmd_left(0)
    , arx_pos_right()
    , cmd_right(0)
    , vcap()
    , hand_q_left()
    , hand_q_right()  {
      arx_pos_left.assign(0.0);

      arx_pos_right.assign(0.0);

      vcap.assign(0.0);

      hand_q_left.assign(0.0);

      hand_q_right.assign(0.0);
  }
  AlohaCmd_(const ContainerAllocator& _alloc)
    : arx_pos_left()
    , cmd_left(0)
    , arx_pos_right()
    , cmd_right(0)
    , vcap()
    , hand_q_left()
    , hand_q_right()  {
  (void)_alloc;
      arx_pos_left.assign(0.0);

      arx_pos_right.assign(0.0);

      vcap.assign(0.0);

      hand_q_left.assign(0.0);

      hand_q_right.assign(0.0);
  }



   typedef boost::array<float, 7>  _arx_pos_left_type;
  _arx_pos_left_type arx_pos_left;

   typedef int32_t _cmd_left_type;
  _cmd_left_type cmd_left;

   typedef boost::array<float, 7>  _arx_pos_right_type;
  _arx_pos_right_type arx_pos_right;

   typedef int32_t _cmd_right_type;
  _cmd_right_type cmd_right;

   typedef boost::array<float, 2>  _vcap_type;
  _vcap_type vcap;

   typedef boost::array<float, 6>  _hand_q_left_type;
  _hand_q_left_type hand_q_left;

   typedef boost::array<float, 6>  _hand_q_right_type;
  _hand_q_right_type hand_q_right;





  typedef boost::shared_ptr< ::sdk::AlohaCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdk::AlohaCmd_<ContainerAllocator> const> ConstPtr;

}; // struct AlohaCmd_

typedef ::sdk::AlohaCmd_<std::allocator<void> > AlohaCmd;

typedef boost::shared_ptr< ::sdk::AlohaCmd > AlohaCmdPtr;
typedef boost::shared_ptr< ::sdk::AlohaCmd const> AlohaCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdk::AlohaCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdk::AlohaCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdk::AlohaCmd_<ContainerAllocator1> & lhs, const ::sdk::AlohaCmd_<ContainerAllocator2> & rhs)
{
  return lhs.arx_pos_left == rhs.arx_pos_left &&
    lhs.cmd_left == rhs.cmd_left &&
    lhs.arx_pos_right == rhs.arx_pos_right &&
    lhs.cmd_right == rhs.cmd_right &&
    lhs.vcap == rhs.vcap &&
    lhs.hand_q_left == rhs.hand_q_left &&
    lhs.hand_q_right == rhs.hand_q_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdk::AlohaCmd_<ContainerAllocator1> & lhs, const ::sdk::AlohaCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdk::AlohaCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdk::AlohaCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::AlohaCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::AlohaCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::AlohaCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::AlohaCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdk::AlohaCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f361ca781a235f90d7fbb4fb47d3766d";
  }

  static const char* value(const ::sdk::AlohaCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf361ca781a235f90ULL;
  static const uint64_t static_value2 = 0xd7fbb4fb47d3766dULL;
};

template<class ContainerAllocator>
struct DataType< ::sdk::AlohaCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdk/AlohaCmd";
  }

  static const char* value(const ::sdk::AlohaCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdk::AlohaCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[7] arx_pos_left\n"
"int32 cmd_left\n"
"float32[7] arx_pos_right\n"
"int32 cmd_right\n"
"float32[2] vcap\n"
"float32[6] hand_q_left\n"
"float32[6] hand_q_right\n"
;
  }

  static const char* value(const ::sdk::AlohaCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdk::AlohaCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arx_pos_left);
      stream.next(m.cmd_left);
      stream.next(m.arx_pos_right);
      stream.next(m.cmd_right);
      stream.next(m.vcap);
      stream.next(m.hand_q_left);
      stream.next(m.hand_q_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AlohaCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdk::AlohaCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdk::AlohaCmd_<ContainerAllocator>& v)
  {
    s << indent << "arx_pos_left[]" << std::endl;
    for (size_t i = 0; i < v.arx_pos_left.size(); ++i)
    {
      s << indent << "  arx_pos_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.arx_pos_left[i]);
    }
    s << indent << "cmd_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd_left);
    s << indent << "arx_pos_right[]" << std::endl;
    for (size_t i = 0; i < v.arx_pos_right.size(); ++i)
    {
      s << indent << "  arx_pos_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.arx_pos_right[i]);
    }
    s << indent << "cmd_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd_right);
    s << indent << "vcap[]" << std::endl;
    for (size_t i = 0; i < v.vcap.size(); ++i)
    {
      s << indent << "  vcap[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vcap[i]);
    }
    s << indent << "hand_q_left[]" << std::endl;
    for (size_t i = 0; i < v.hand_q_left.size(); ++i)
    {
      s << indent << "  hand_q_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.hand_q_left[i]);
    }
    s << indent << "hand_q_right[]" << std::endl;
    for (size_t i = 0; i < v.hand_q_right.size(); ++i)
    {
      s << indent << "  hand_q_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.hand_q_right[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDK_MESSAGE_ALOHACMD_H
