// Generated by gencpp from file sdk/GetEnvironmentResponse.msg
// DO NOT EDIT!


#ifndef SDK_MESSAGE_GETENVIRONMENTRESPONSE_H
#define SDK_MESSAGE_GETENVIRONMENTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sdk/Environment.h>

namespace sdk
{
template <class ContainerAllocator>
struct GetEnvironmentResponse_
{
  typedef GetEnvironmentResponse_<ContainerAllocator> Type;

  GetEnvironmentResponse_()
    : environment()  {
    }
  GetEnvironmentResponse_(const ContainerAllocator& _alloc)
    : environment(_alloc)  {
  (void)_alloc;
    }



   typedef  ::sdk::Environment_<ContainerAllocator>  _environment_type;
  _environment_type environment;





  typedef boost::shared_ptr< ::sdk::GetEnvironmentResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdk::GetEnvironmentResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetEnvironmentResponse_

typedef ::sdk::GetEnvironmentResponse_<std::allocator<void> > GetEnvironmentResponse;

typedef boost::shared_ptr< ::sdk::GetEnvironmentResponse > GetEnvironmentResponsePtr;
typedef boost::shared_ptr< ::sdk::GetEnvironmentResponse const> GetEnvironmentResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdk::GetEnvironmentResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdk::GetEnvironmentResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdk::GetEnvironmentResponse_<ContainerAllocator1> & lhs, const ::sdk::GetEnvironmentResponse_<ContainerAllocator2> & rhs)
{
  return lhs.environment == rhs.environment;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdk::GetEnvironmentResponse_<ContainerAllocator1> & lhs, const ::sdk::GetEnvironmentResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdk::GetEnvironmentResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdk::GetEnvironmentResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::GetEnvironmentResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::GetEnvironmentResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::GetEnvironmentResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::GetEnvironmentResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdk::GetEnvironmentResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c129af3e8bb0ea69939bd4e986db16e7";
  }

  static const char* value(const ::sdk::GetEnvironmentResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc129af3e8bb0ea69ULL;
  static const uint64_t static_value2 = 0x939bd4e986db16e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdk::GetEnvironmentResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdk/GetEnvironmentResponse";
  }

  static const char* value(const ::sdk::GetEnvironmentResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdk::GetEnvironmentResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Environment environment\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sdk/Environment\n"
"int32 obj_num #\n"
"int32[10] obj_state #\n"
"int32[10] obj_id\n"
"int32[10] obj_side #\n"
"EndPos[10] obj_pos_from_left #\n"
"EndPos[10] obj_att_from_left #\n"
"EndPos[10] wrist_pos_from_left\n"
"EndPos[10] wrist_att_from_left\n"
"EndPos[10] imminent_pos_from_left\n"
"EndPos[10] imminent_att_from_left\n"
"EndPos[10] obj_pos_from_right #\n"
"EndPos[10] obj_att_from_right #\n"
"EndPos[10] wrist_pos_from_right\n"
"EndPos[10] wrist_att_from_right\n"
"EndPos[10] imminent_pos_from_right\n"
"EndPos[10] imminent_att_from_right\n"
"BoudingBox[10] obj_box\n"
"string[10] obj_name #\n"
"================================================================================\n"
"MSG: sdk/EndPos\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 zz\n"
"================================================================================\n"
"MSG: sdk/BoudingBox\n"
"int32 clss\n"
"int32 x\n"
"int32 y\n"
"int32 width\n"
"int32 height\n"
;
  }

  static const char* value(const ::sdk::GetEnvironmentResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdk::GetEnvironmentResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.environment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetEnvironmentResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdk::GetEnvironmentResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdk::GetEnvironmentResponse_<ContainerAllocator>& v)
  {
    s << indent << "environment: ";
    s << std::endl;
    Printer< ::sdk::Environment_<ContainerAllocator> >::stream(s, indent + "  ", v.environment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDK_MESSAGE_GETENVIRONMENTRESPONSE_H
