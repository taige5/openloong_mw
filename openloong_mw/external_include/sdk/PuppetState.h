// Generated by gencpp from file sdk/PuppetState.msg
// DO NOT EDIT!


#ifndef SDK_MESSAGE_PUPPETSTATE_H
#define SDK_MESSAGE_PUPPETSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <sdk/PuppetIMU.h>

namespace sdk
{
template <class ContainerAllocator>
struct PuppetState_
{
  typedef PuppetState_<ContainerAllocator> Type;

  PuppetState_()
    : header()
    , hand_right()
    , hand_right_exp()
    , hand_left()
    , hand_left_exp()
    , arm_right()
    , arm_right_exp()
    , arm_left()
    , arm_left_exp()
    , head()
    , head_exp()
    , waist()
    , waist_exp()
    , leg_right()
    , leg_right_exp()
    , leg_left()
    , leg_left_exp()
    , imu()
    , key(0)
    , sdk_mode(0)  {
    }
  PuppetState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hand_right(_alloc)
    , hand_right_exp(_alloc)
    , hand_left(_alloc)
    , hand_left_exp(_alloc)
    , arm_right(_alloc)
    , arm_right_exp(_alloc)
    , arm_left(_alloc)
    , arm_left_exp(_alloc)
    , head(_alloc)
    , head_exp(_alloc)
    , waist(_alloc)
    , waist_exp(_alloc)
    , leg_right(_alloc)
    , leg_right_exp(_alloc)
    , leg_left(_alloc)
    , leg_left_exp(_alloc)
    , imu(_alloc)
    , key(0)
    , sdk_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _hand_right_type;
  _hand_right_type hand_right;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _hand_right_exp_type;
  _hand_right_exp_type hand_right_exp;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _hand_left_type;
  _hand_left_type hand_left;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _hand_left_exp_type;
  _hand_left_exp_type hand_left_exp;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _arm_right_type;
  _arm_right_type arm_right;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _arm_right_exp_type;
  _arm_right_exp_type arm_right_exp;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _arm_left_type;
  _arm_left_type arm_left;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _arm_left_exp_type;
  _arm_left_exp_type arm_left_exp;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _head_type;
  _head_type head;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _head_exp_type;
  _head_exp_type head_exp;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _waist_type;
  _waist_type waist;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _waist_exp_type;
  _waist_exp_type waist_exp;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _leg_right_type;
  _leg_right_type leg_right;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _leg_right_exp_type;
  _leg_right_exp_type leg_right_exp;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _leg_left_type;
  _leg_left_type leg_left;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _leg_left_exp_type;
  _leg_left_exp_type leg_left_exp;

   typedef  ::sdk::PuppetIMU_<ContainerAllocator>  _imu_type;
  _imu_type imu;

   typedef int8_t _key_type;
  _key_type key;

   typedef int8_t _sdk_mode_type;
  _sdk_mode_type sdk_mode;





  typedef boost::shared_ptr< ::sdk::PuppetState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdk::PuppetState_<ContainerAllocator> const> ConstPtr;

}; // struct PuppetState_

typedef ::sdk::PuppetState_<std::allocator<void> > PuppetState;

typedef boost::shared_ptr< ::sdk::PuppetState > PuppetStatePtr;
typedef boost::shared_ptr< ::sdk::PuppetState const> PuppetStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdk::PuppetState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdk::PuppetState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdk::PuppetState_<ContainerAllocator1> & lhs, const ::sdk::PuppetState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.hand_right == rhs.hand_right &&
    lhs.hand_right_exp == rhs.hand_right_exp &&
    lhs.hand_left == rhs.hand_left &&
    lhs.hand_left_exp == rhs.hand_left_exp &&
    lhs.arm_right == rhs.arm_right &&
    lhs.arm_right_exp == rhs.arm_right_exp &&
    lhs.arm_left == rhs.arm_left &&
    lhs.arm_left_exp == rhs.arm_left_exp &&
    lhs.head == rhs.head &&
    lhs.head_exp == rhs.head_exp &&
    lhs.waist == rhs.waist &&
    lhs.waist_exp == rhs.waist_exp &&
    lhs.leg_right == rhs.leg_right &&
    lhs.leg_right_exp == rhs.leg_right_exp &&
    lhs.leg_left == rhs.leg_left &&
    lhs.leg_left_exp == rhs.leg_left_exp &&
    lhs.imu == rhs.imu &&
    lhs.key == rhs.key &&
    lhs.sdk_mode == rhs.sdk_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdk::PuppetState_<ContainerAllocator1> & lhs, const ::sdk::PuppetState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdk::PuppetState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdk::PuppetState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::PuppetState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::PuppetState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::PuppetState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::PuppetState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdk::PuppetState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90f6230613581fd2abb7c192e12c5fee";
  }

  static const char* value(const ::sdk::PuppetState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90f6230613581fd2ULL;
  static const uint64_t static_value2 = 0xabb7c192e12c5feeULL;
};

template<class ContainerAllocator>
struct DataType< ::sdk::PuppetState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdk/PuppetState";
  }

  static const char* value(const ::sdk::PuppetState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdk::PuppetState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"sensor_msgs/JointState hand_right\n"
"sensor_msgs/JointState hand_right_exp\n"
"sensor_msgs/JointState hand_left\n"
"sensor_msgs/JointState hand_left_exp\n"
"sensor_msgs/JointState arm_right\n"
"sensor_msgs/JointState arm_right_exp\n"
"sensor_msgs/JointState arm_left\n"
"sensor_msgs/JointState arm_left_exp\n"
"sensor_msgs/JointState head\n"
"sensor_msgs/JointState head_exp\n"
"sensor_msgs/JointState waist\n"
"sensor_msgs/JointState waist_exp\n"
"sensor_msgs/JointState leg_right\n"
"sensor_msgs/JointState leg_right_exp\n"
"sensor_msgs/JointState leg_left\n"
"sensor_msgs/JointState leg_left_exp\n"
"sdk/PuppetIMU imu\n"
"int8 key\n"
"int8 sdk_mode\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
"\n"
"================================================================================\n"
"MSG: sdk/PuppetIMU\n"
"geometry_msgs/Vector3 attitude\n"
"geometry_msgs/Vector3 angular_velocity\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::sdk::PuppetState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdk::PuppetState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hand_right);
      stream.next(m.hand_right_exp);
      stream.next(m.hand_left);
      stream.next(m.hand_left_exp);
      stream.next(m.arm_right);
      stream.next(m.arm_right_exp);
      stream.next(m.arm_left);
      stream.next(m.arm_left_exp);
      stream.next(m.head);
      stream.next(m.head_exp);
      stream.next(m.waist);
      stream.next(m.waist_exp);
      stream.next(m.leg_right);
      stream.next(m.leg_right_exp);
      stream.next(m.leg_left);
      stream.next(m.leg_left_exp);
      stream.next(m.imu);
      stream.next(m.key);
      stream.next(m.sdk_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PuppetState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdk::PuppetState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdk::PuppetState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hand_right: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.hand_right);
    s << indent << "hand_right_exp: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.hand_right_exp);
    s << indent << "hand_left: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.hand_left);
    s << indent << "hand_left_exp: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.hand_left_exp);
    s << indent << "arm_right: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.arm_right);
    s << indent << "arm_right_exp: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.arm_right_exp);
    s << indent << "arm_left: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.arm_left);
    s << indent << "arm_left_exp: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.arm_left_exp);
    s << indent << "head: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.head);
    s << indent << "head_exp: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.head_exp);
    s << indent << "waist: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.waist);
    s << indent << "waist_exp: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.waist_exp);
    s << indent << "leg_right: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.leg_right);
    s << indent << "leg_right_exp: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.leg_right_exp);
    s << indent << "leg_left: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.leg_left);
    s << indent << "leg_left_exp: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.leg_left_exp);
    s << indent << "imu: ";
    s << std::endl;
    Printer< ::sdk::PuppetIMU_<ContainerAllocator> >::stream(s, indent + "  ", v.imu);
    s << indent << "key: ";
    Printer<int8_t>::stream(s, indent + "  ", v.key);
    s << indent << "sdk_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sdk_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDK_MESSAGE_PUPPETSTATE_H
