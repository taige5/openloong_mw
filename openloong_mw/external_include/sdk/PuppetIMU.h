// Generated by gencpp from file sdk/PuppetIMU.msg
// DO NOT EDIT!


#ifndef SDK_MESSAGE_PUPPETIMU_H
#define SDK_MESSAGE_PUPPETIMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace sdk
{
template <class ContainerAllocator>
struct PuppetIMU_
{
  typedef PuppetIMU_<ContainerAllocator> Type;

  PuppetIMU_()
    : attitude()
    , angular_velocity()
    , linear_acceleration()  {
    }
  PuppetIMU_(const ContainerAllocator& _alloc)
    : attitude(_alloc)
    , angular_velocity(_alloc)
    , linear_acceleration(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _attitude_type;
  _attitude_type attitude;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;





  typedef boost::shared_ptr< ::sdk::PuppetIMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdk::PuppetIMU_<ContainerAllocator> const> ConstPtr;

}; // struct PuppetIMU_

typedef ::sdk::PuppetIMU_<std::allocator<void> > PuppetIMU;

typedef boost::shared_ptr< ::sdk::PuppetIMU > PuppetIMUPtr;
typedef boost::shared_ptr< ::sdk::PuppetIMU const> PuppetIMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdk::PuppetIMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdk::PuppetIMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdk::PuppetIMU_<ContainerAllocator1> & lhs, const ::sdk::PuppetIMU_<ContainerAllocator2> & rhs)
{
  return lhs.attitude == rhs.attitude &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.linear_acceleration == rhs.linear_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdk::PuppetIMU_<ContainerAllocator1> & lhs, const ::sdk::PuppetIMU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdk::PuppetIMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdk::PuppetIMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::PuppetIMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::PuppetIMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::PuppetIMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::PuppetIMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdk::PuppetIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "354dc0491026601b3ea16f7b4708a218";
  }

  static const char* value(const ::sdk::PuppetIMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x354dc0491026601bULL;
  static const uint64_t static_value2 = 0x3ea16f7b4708a218ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdk::PuppetIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdk/PuppetIMU";
  }

  static const char* value(const ::sdk::PuppetIMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdk::PuppetIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 attitude\n"
"geometry_msgs/Vector3 angular_velocity\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::sdk::PuppetIMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdk::PuppetIMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.attitude);
      stream.next(m.angular_velocity);
      stream.next(m.linear_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PuppetIMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdk::PuppetIMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdk::PuppetIMU_<ContainerAllocator>& v)
  {
    s << indent << "attitude: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDK_MESSAGE_PUPPETIMU_H
