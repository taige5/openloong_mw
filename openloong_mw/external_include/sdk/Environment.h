// Generated by gencpp from file sdk/Environment.msg
// DO NOT EDIT!


#ifndef SDK_MESSAGE_ENVIRONMENT_H
#define SDK_MESSAGE_ENVIRONMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/EndPos.h>
#include <sdk/BoudingBox.h>

namespace sdk
{
template <class ContainerAllocator>
struct Environment_
{
  typedef Environment_<ContainerAllocator> Type;

  Environment_()
    : obj_num(0)
    , obj_state()
    , obj_id()
    , obj_side()
    , obj_pos_from_left()
    , obj_att_from_left()
    , wrist_pos_from_left()
    , wrist_att_from_left()
    , imminent_pos_from_left()
    , imminent_att_from_left()
    , obj_pos_from_right()
    , obj_att_from_right()
    , wrist_pos_from_right()
    , wrist_att_from_right()
    , imminent_pos_from_right()
    , imminent_att_from_right()
    , obj_box()
    , obj_name()  {
      obj_state.assign(0);

      obj_id.assign(0);

      obj_side.assign(0);
  }
  Environment_(const ContainerAllocator& _alloc)
    : obj_num(0)
    , obj_state()
    , obj_id()
    , obj_side()
    , obj_pos_from_left()
    , obj_att_from_left()
    , wrist_pos_from_left()
    , wrist_att_from_left()
    , imminent_pos_from_left()
    , imminent_att_from_left()
    , obj_pos_from_right()
    , obj_att_from_right()
    , wrist_pos_from_right()
    , wrist_att_from_right()
    , imminent_pos_from_right()
    , imminent_att_from_right()
    , obj_box()
    , obj_name()  {
      obj_state.assign(0);

      obj_id.assign(0);

      obj_side.assign(0);

      obj_pos_from_left.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      obj_att_from_left.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      wrist_pos_from_left.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      wrist_att_from_left.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      imminent_pos_from_left.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      imminent_att_from_left.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      obj_pos_from_right.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      obj_att_from_right.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      wrist_pos_from_right.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      wrist_att_from_right.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      imminent_pos_from_right.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      imminent_att_from_right.assign( ::sdk::EndPos_<ContainerAllocator> (_alloc));

      obj_box.assign( ::sdk::BoudingBox_<ContainerAllocator> (_alloc));

      obj_name.assign(std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>(_alloc));
  }



   typedef int32_t _obj_num_type;
  _obj_num_type obj_num;

   typedef boost::array<int32_t, 10>  _obj_state_type;
  _obj_state_type obj_state;

   typedef boost::array<int32_t, 10>  _obj_id_type;
  _obj_id_type obj_id;

   typedef boost::array<int32_t, 10>  _obj_side_type;
  _obj_side_type obj_side;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _obj_pos_from_left_type;
  _obj_pos_from_left_type obj_pos_from_left;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _obj_att_from_left_type;
  _obj_att_from_left_type obj_att_from_left;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _wrist_pos_from_left_type;
  _wrist_pos_from_left_type wrist_pos_from_left;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _wrist_att_from_left_type;
  _wrist_att_from_left_type wrist_att_from_left;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _imminent_pos_from_left_type;
  _imminent_pos_from_left_type imminent_pos_from_left;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _imminent_att_from_left_type;
  _imminent_att_from_left_type imminent_att_from_left;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _obj_pos_from_right_type;
  _obj_pos_from_right_type obj_pos_from_right;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _obj_att_from_right_type;
  _obj_att_from_right_type obj_att_from_right;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _wrist_pos_from_right_type;
  _wrist_pos_from_right_type wrist_pos_from_right;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _wrist_att_from_right_type;
  _wrist_att_from_right_type wrist_att_from_right;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _imminent_pos_from_right_type;
  _imminent_pos_from_right_type imminent_pos_from_right;

   typedef boost::array< ::sdk::EndPos_<ContainerAllocator> , 10>  _imminent_att_from_right_type;
  _imminent_att_from_right_type imminent_att_from_right;

   typedef boost::array< ::sdk::BoudingBox_<ContainerAllocator> , 10>  _obj_box_type;
  _obj_box_type obj_box;

   typedef boost::array<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, 10>  _obj_name_type;
  _obj_name_type obj_name;





  typedef boost::shared_ptr< ::sdk::Environment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdk::Environment_<ContainerAllocator> const> ConstPtr;

}; // struct Environment_

typedef ::sdk::Environment_<std::allocator<void> > Environment;

typedef boost::shared_ptr< ::sdk::Environment > EnvironmentPtr;
typedef boost::shared_ptr< ::sdk::Environment const> EnvironmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdk::Environment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdk::Environment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdk::Environment_<ContainerAllocator1> & lhs, const ::sdk::Environment_<ContainerAllocator2> & rhs)
{
  return lhs.obj_num == rhs.obj_num &&
    lhs.obj_state == rhs.obj_state &&
    lhs.obj_id == rhs.obj_id &&
    lhs.obj_side == rhs.obj_side &&
    lhs.obj_pos_from_left == rhs.obj_pos_from_left &&
    lhs.obj_att_from_left == rhs.obj_att_from_left &&
    lhs.wrist_pos_from_left == rhs.wrist_pos_from_left &&
    lhs.wrist_att_from_left == rhs.wrist_att_from_left &&
    lhs.imminent_pos_from_left == rhs.imminent_pos_from_left &&
    lhs.imminent_att_from_left == rhs.imminent_att_from_left &&
    lhs.obj_pos_from_right == rhs.obj_pos_from_right &&
    lhs.obj_att_from_right == rhs.obj_att_from_right &&
    lhs.wrist_pos_from_right == rhs.wrist_pos_from_right &&
    lhs.wrist_att_from_right == rhs.wrist_att_from_right &&
    lhs.imminent_pos_from_right == rhs.imminent_pos_from_right &&
    lhs.imminent_att_from_right == rhs.imminent_att_from_right &&
    lhs.obj_box == rhs.obj_box &&
    lhs.obj_name == rhs.obj_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdk::Environment_<ContainerAllocator1> & lhs, const ::sdk::Environment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdk::Environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdk::Environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::Environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk::Environment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::Environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk::Environment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdk::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb8bac4f46c23e3c41cac77d2230f467";
  }

  static const char* value(const ::sdk::Environment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb8bac4f46c23e3cULL;
  static const uint64_t static_value2 = 0x41cac77d2230f467ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdk::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdk/Environment";
  }

  static const char* value(const ::sdk::Environment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdk::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 obj_num #\n"
"int32[10] obj_state #\n"
"int32[10] obj_id\n"
"int32[10] obj_side #\n"
"EndPos[10] obj_pos_from_left #\n"
"EndPos[10] obj_att_from_left #\n"
"EndPos[10] wrist_pos_from_left\n"
"EndPos[10] wrist_att_from_left\n"
"EndPos[10] imminent_pos_from_left\n"
"EndPos[10] imminent_att_from_left\n"
"EndPos[10] obj_pos_from_right #\n"
"EndPos[10] obj_att_from_right #\n"
"EndPos[10] wrist_pos_from_right\n"
"EndPos[10] wrist_att_from_right\n"
"EndPos[10] imminent_pos_from_right\n"
"EndPos[10] imminent_att_from_right\n"
"BoudingBox[10] obj_box\n"
"string[10] obj_name #\n"
"================================================================================\n"
"MSG: sdk/EndPos\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 zz\n"
"================================================================================\n"
"MSG: sdk/BoudingBox\n"
"int32 clss\n"
"int32 x\n"
"int32 y\n"
"int32 width\n"
"int32 height\n"
;
  }

  static const char* value(const ::sdk::Environment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdk::Environment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_num);
      stream.next(m.obj_state);
      stream.next(m.obj_id);
      stream.next(m.obj_side);
      stream.next(m.obj_pos_from_left);
      stream.next(m.obj_att_from_left);
      stream.next(m.wrist_pos_from_left);
      stream.next(m.wrist_att_from_left);
      stream.next(m.imminent_pos_from_left);
      stream.next(m.imminent_att_from_left);
      stream.next(m.obj_pos_from_right);
      stream.next(m.obj_att_from_right);
      stream.next(m.wrist_pos_from_right);
      stream.next(m.wrist_att_from_right);
      stream.next(m.imminent_pos_from_right);
      stream.next(m.imminent_att_from_right);
      stream.next(m.obj_box);
      stream.next(m.obj_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Environment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdk::Environment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdk::Environment_<ContainerAllocator>& v)
  {
    s << indent << "obj_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obj_num);
    s << indent << "obj_state[]" << std::endl;
    for (size_t i = 0; i < v.obj_state.size(); ++i)
    {
      s << indent << "  obj_state[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.obj_state[i]);
    }
    s << indent << "obj_id[]" << std::endl;
    for (size_t i = 0; i < v.obj_id.size(); ++i)
    {
      s << indent << "  obj_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.obj_id[i]);
    }
    s << indent << "obj_side[]" << std::endl;
    for (size_t i = 0; i < v.obj_side.size(); ++i)
    {
      s << indent << "  obj_side[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.obj_side[i]);
    }
    s << indent << "obj_pos_from_left[]" << std::endl;
    for (size_t i = 0; i < v.obj_pos_from_left.size(); ++i)
    {
      s << indent << "  obj_pos_from_left[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.obj_pos_from_left[i]);
    }
    s << indent << "obj_att_from_left[]" << std::endl;
    for (size_t i = 0; i < v.obj_att_from_left.size(); ++i)
    {
      s << indent << "  obj_att_from_left[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.obj_att_from_left[i]);
    }
    s << indent << "wrist_pos_from_left[]" << std::endl;
    for (size_t i = 0; i < v.wrist_pos_from_left.size(); ++i)
    {
      s << indent << "  wrist_pos_from_left[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.wrist_pos_from_left[i]);
    }
    s << indent << "wrist_att_from_left[]" << std::endl;
    for (size_t i = 0; i < v.wrist_att_from_left.size(); ++i)
    {
      s << indent << "  wrist_att_from_left[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.wrist_att_from_left[i]);
    }
    s << indent << "imminent_pos_from_left[]" << std::endl;
    for (size_t i = 0; i < v.imminent_pos_from_left.size(); ++i)
    {
      s << indent << "  imminent_pos_from_left[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.imminent_pos_from_left[i]);
    }
    s << indent << "imminent_att_from_left[]" << std::endl;
    for (size_t i = 0; i < v.imminent_att_from_left.size(); ++i)
    {
      s << indent << "  imminent_att_from_left[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.imminent_att_from_left[i]);
    }
    s << indent << "obj_pos_from_right[]" << std::endl;
    for (size_t i = 0; i < v.obj_pos_from_right.size(); ++i)
    {
      s << indent << "  obj_pos_from_right[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.obj_pos_from_right[i]);
    }
    s << indent << "obj_att_from_right[]" << std::endl;
    for (size_t i = 0; i < v.obj_att_from_right.size(); ++i)
    {
      s << indent << "  obj_att_from_right[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.obj_att_from_right[i]);
    }
    s << indent << "wrist_pos_from_right[]" << std::endl;
    for (size_t i = 0; i < v.wrist_pos_from_right.size(); ++i)
    {
      s << indent << "  wrist_pos_from_right[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.wrist_pos_from_right[i]);
    }
    s << indent << "wrist_att_from_right[]" << std::endl;
    for (size_t i = 0; i < v.wrist_att_from_right.size(); ++i)
    {
      s << indent << "  wrist_att_from_right[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.wrist_att_from_right[i]);
    }
    s << indent << "imminent_pos_from_right[]" << std::endl;
    for (size_t i = 0; i < v.imminent_pos_from_right.size(); ++i)
    {
      s << indent << "  imminent_pos_from_right[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.imminent_pos_from_right[i]);
    }
    s << indent << "imminent_att_from_right[]" << std::endl;
    for (size_t i = 0; i < v.imminent_att_from_right.size(); ++i)
    {
      s << indent << "  imminent_att_from_right[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::EndPos_<ContainerAllocator> >::stream(s, indent + "    ", v.imminent_att_from_right[i]);
    }
    s << indent << "obj_box[]" << std::endl;
    for (size_t i = 0; i < v.obj_box.size(); ++i)
    {
      s << indent << "  obj_box[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sdk::BoudingBox_<ContainerAllocator> >::stream(s, indent + "    ", v.obj_box[i]);
    }
    s << indent << "obj_name[]" << std::endl;
    for (size_t i = 0; i < v.obj_name.size(); ++i)
    {
      s << indent << "  obj_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.obj_name[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDK_MESSAGE_ENVIRONMENT_H
